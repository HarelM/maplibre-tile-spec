{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Note</p> <p>This is a live specification that evolves continuously. Features marked as  are under active development and may change in future versions. Stable features are those without experimental tags.</p> <p>The MLT format is mainly inspired by the MVT format, but has been redesigned from the ground up to improve the following areas:</p> <ul> <li>Improved compression ratio - up to 6x on large tiles, based on a column oriented layout with (custom) lightweight encodings</li> <li>Better decoding performance - fast lightweight encodings which can be used in combination with SIMD/vectorization instructions</li> <li>Support for linear referencing and m-values to efficiently support the upcoming next generation source formats such as Overture Maps (GeoParquet)</li> <li>Support 3D coordinates, i.e. elevation</li> <li>Support complex types, including nested properties, lists and maps</li> <li>Improved processing performance: Based on an in-memory format that can be processed efficiently on the CPU and GPU and loaded directly into GPU buffers partially (like polygons in WebGL) or completely (in case of WebGPU compute shader usage) without additional processing</li> </ul>"},{"location":"encodings/","title":"Encoding Algorithms","text":"Encoding Definitions <ul> <li>Plain</li> <li>Boolean-RLE</li> <li>Byte-RLE</li> <li>Dictionary Encoding<ul> <li>String Dictionary Encoding<ul> <li>FSST Dictionary Encoding</li> <li>Shared Dictionary Encoding</li> </ul> </li> <li>Vertex Dictionary Encoding<ul> <li>Morton Vertex Dictionary Encoding</li> </ul> </li> </ul> </li> <li>Integer Encodings<ul> <li>Logical-Level Techniques<ul> <li>Delta Encoding</li> <li>Run-Length Encoding (RLE)</li> <li>Delta-RLE</li> </ul> </li> <li>Physical-Level Techniques<ul> <li>ZigZag Encoding</li> <li>Varint Encoding</li> <li>SIMD-FastPFOR</li> </ul> </li> </ul> </li> <li>Float Encodings<ul> <li>Adaptive Lossless Floating-Point Compression (ALP)</li> </ul> </li> </ul>"},{"location":"encodings/#plain","title":"Plain","text":"<p>No compression is applied to the data. Depending on the data type, values are stored in the following formats:</p> <ul> <li>Boolean: Least-significant bit ordering within bytes</li> <li>Integer: Little-Endian byte order</li> <li>Long: Little-Endian byte order</li> <li>Float: IEEE754 floating-point numbers in Little-Endian byte order</li> <li>Double: IEEE754 floating-point numbers in Little-Endian byte order</li> <li>String: Length and data streams</li> </ul>"},{"location":"encodings/#boolean-rle","title":"Boolean-RLE","text":"<p>This encoding compresses boolean columns using least-significant bit numbering (bit-endianness). Refer to the ORC specification for implementation details.</p>"},{"location":"encodings/#byte-rle","title":"Byte-RLE","text":"<p>This encoding compresses byte streams, such as the <code>GeometryType</code> stream in Geometry columns. Refer to the ORC specification for implementation details.</p>"},{"location":"encodings/#dictionary-encoding","title":"Dictionary Encoding","text":"<p>Dictionary encoding compactly represents repeated values and can be applied to <code>String</code> and <code>Geometry</code> columns. Distinct values are stored in a <code>dictionary</code> stream, while a separate <code>data</code> stream stores indices into the dictionary. We allow the following encodings of this concept:</p>"},{"location":"encodings/#string-dictionary-encoding","title":"String Dictionary Encoding","text":"<p>The dictionary stream contains distinct UTF-8 encoded string values. The data stream contains dictionary indices encoded as <code>UInt32</code>. A dictionary-encoded nullable string column consists of the following streams in order: <code>Present</code>, <code>Length</code>, <code>Dictionary</code>, <code>Data</code></p> <p>Note</p> <p>TODO: Is \"can\" (=&gt; MAY) here the right terminoligy? This implies that streams might be encoded by one of the options below, but also other options.</p> <p>If yes, what is the alternative options? If no, clarify this misunderstanding.</p> <p>All streams can be further compressed using lightweight encodings:</p> <ul> <li>Present Stream: Boolean-RLE</li> <li>Length and Data Stream: See Integer encodings</li> <li>Dictionary: See FSST Dictionary</li> </ul>"},{"location":"encodings/#fsst-dictionary-encoding","title":"FSST Dictionary Encoding","text":"<p>Dictionary encoding requires fully repeating strings to reduce size. However, geospatial attributes often contain strings with common prefixes that are not identical (e.g., localized country names). FSST replaces frequently occurring substrings while supporting efficient scans and random lookups. It further compresses UTF-8 encoded dictionary values in MLT. An FSST dictionary-encoded nullable string column consists of the following streams in order: <code>Present</code>, <code>SymbolLength</code>, <code>SymbolTable</code>, <code>String Length</code>, <code>Dictionary</code> (Compressed Corpus) For implementation details, refer to this paper.</p> <p>Available implementations:</p> <ul> <li>C++: https://github.com/cwida/fsst</li> <li>Java: Work in progress</li> <li>JS/WebAssembly decoder: Work in progress (simple to implement)</li> </ul>"},{"location":"encodings/#shared-dictionary-encoding","title":"Shared Dictionary Encoding","text":"<p>Shared dictionary encoding allows multiple columns to share a common dictionary. Nested fields can also use a shared dictionary (e.g., for localized values like <code>name:*</code> columns in an OSM dataset). If used for nested fields, all fields sharing the dictionary must be grouped together in the file and prefixed with the dictionary.</p> <p>A shared dictionary-encoded nullable string column consists of the following streams in order: <code>Length</code>, <code>Dictionary</code>, <code>Present1</code>, <code>Data1</code>, <code>Present2</code>, <code>Data2</code></p> <p>A shared FSST dictionary-encoded nullable string column consists of the following streams in order: <code>SymbolLength</code>, <code>SymbolTable</code>, <code>String Length</code>, <code>Dictionary</code> (Compressed Corpus), <code>Present1</code>, <code>Data1</code>, <code>Present2</code>, <code>Data2</code></p>"},{"location":"encodings/#vertex-dictionary-encoding","title":"Vertex Dictionary Encoding","text":"<p>Uses an additional <code>VertexOffsets</code> stream to store indices for vertex coordinates in the <code>VertexBuffer</code> stream. Vertices in the VertexBuffer are sorted using a Hilbert curve and delta-encoded with null suppression.</p>"},{"location":"encodings/#morton-vertex-dictionary-encoding","title":"Morton Vertex Dictionary Encoding","text":"<p><code>VertexBuffer</code> coordinates are transformed into a 1D integer using Morton code. The data is sorted by Morton code and further compressed using integer compression techniques.</p>"},{"location":"encodings/#integer-encodings","title":"Integer Encodings","text":"<p>Most data in MLT is stored as integer arrays, making efficient integer compression crucial.</p>"},{"location":"encodings/#logical-level-techniques","title":"Logical-Level Techniques","text":"<p>Integers are encoded using delta encoding, run-length encoding (RLE), or a combination of both (delta-RLE).</p>"},{"location":"encodings/#delta-encoding","title":"Delta Encoding","text":"<p>Computes differences between consecutive elements (e.g., x\u2082 - x\u2081, x\u2083 - x\u2082, ...). Used with physical-level techniques to reduce the number of bits required for storing delta values.</p>"},{"location":"encodings/#run-length-encoding-rle","title":"Run-Length Encoding (RLE)","text":"<p>Refer to Wikipedia for a basic explanation. Runs and values are stored in separate buffers. For unsigned integers, ZigZag encoding is applied to the values buffer. Both buffers are further compressed using null suppression.</p>"},{"location":"encodings/#delta-rle","title":"Delta-RLE","text":"<p>Applies delta encoding followed by RLE. Efficient for ascending sequences like <code>id</code> fields.</p>"},{"location":"encodings/#physical-level-techniques","title":"Physical-Level Techniques","text":"<p>Null suppression techniques are used to compress integer arrays by reducing the number of bits required to store each integer.</p>"},{"location":"encodings/#zigzag-encoding","title":"ZigZag Encoding","text":"<p>Used for encoding unsigned integers in null suppression techniques. ZigZag encoding uses the least significant bit to represent the sign.</p>"},{"location":"encodings/#varint-encoding","title":"Varint Encoding","text":"<p>A byte-aligned null suppression technique that compresses integers using a minimal number of bytes. For implementation details, refer to Protobuf.</p>"},{"location":"encodings/#simd-fastpfor","title":"SIMD-FastPFOR","text":"<p>A bit-aligned null suppression technique that compresses integers using a minimal number of bits. Uses a patched approach to store exceptions (outliers) separately, keeping the overall bit width small.</p> <p>Refer to: - https://arxiv.org/pdf/1209.2137.pdf - https://ayende.com/blog/199524-C/integer-compression-the-fastpfor-code</p> <p>Available implementations:</p> <ul> <li>C++: https://github.com/fast-pack/FastPFOR</li> <li>Java: https://github.com/fast-pack/JavaFastPFOR</li> <li>C#: https://github.com/Genbox/CSharpFastPFOR</li> <li>JS/WebAssembly: Work in progress (higher implementation complexity)</li> </ul>"},{"location":"encodings/#float-encodings","title":"Float Encodings","text":""},{"location":"encodings/#adaptive-lossless-floating-point-compression-alp","title":"Adaptive Lossless Floating-Point Compression (ALP)","text":"<p>A lossless floating-point compression technique used in MLT. For a detailed explanation, refer to this paper.</p> <p>Available implementations:</p> <ul> <li>C++: https://github.com/duckdb/duckdb/tree/16830ded9b4882b90f35c2d7e2d740547ae7d3fc/src/include/duckdb/storage/compression/alp</li> <li>Java: Work in progress</li> <li>JS/WebAssembly: Work in progress</li> </ul>"},{"location":"implementation-status/","title":"Implementation Status","text":""},{"location":"implementation-status/#integrations","title":"Integrations","text":"Integration Status MapLibre Native PR: maplibre-native#3246 MapLibre GL JS Issue: maplibre-gl-js#6258"},{"location":"implementation-status/#implementations","title":"Implementations","text":"Implementation Language Type Notes maplibre-tile-spec/cpp C++ Decoder Will be used by MapLibre Native maplibre-tile-spec/js TypeScript Decoder Will be used by MapLibre GL JS maplibre-tile-spec/java Java Encoder maplibre-tile-spec/rust/mlt Rust Decoder / Encoder"},{"location":"specification/","title":"Specification","text":"MapLibre Tile Specification <p>Note</p> <p>This is a live specification that evolves continuously. Features marked as  are under active development and may change in future versions. Stable features are those without experimental tags.</p> <ul> <li>1. Basics</li> <li>2. Tile Layout<ul> <li>2.1 Metadata<ul> <li>2.1.1 Tileset Metadata</li> <li>2.1.2 Tile Metadata</li> <li>2.1.3 FeatureTable Metadata</li> </ul> </li> <li>2.2 Type System<ul> <li>2.2.1 Physical Types</li> <li>2.2.2 Logical Types</li> <li>2.2.3 Nested Fields Encoding</li> <li>2.2.4 RangeMap</li> </ul> </li> <li>2.3 Encoding Schemes</li> <li>2.4 FeatureTable Layout<ul> <li>2.4.1 ID Column</li> <li>2.4.2 Geometry Column</li> <li>2.4.3 Property Columns</li> </ul> </li> </ul> </li> <li>3. Example Layouts<ul> <li>3.1 Place Layer</li> <li>3.2 LineString Geometry with Flat Properties</li> <li>3.3 MultiPolygon with Flat Properties</li> <li>3.4 Vertex-Scoped and Feature-Scoped Properties</li> </ul> </li> <li>4. Sorting</li> <li>5. Encodings</li> <li>6. In-Memory Format</li> </ul>"},{"location":"specification/#1-basics","title":"1. Basics","text":"<p>An MLT (MapLibre Tile) contains information about a specific geographic region, known as a tile. Each tile is a collection of <code>FeatureTables</code>, which are equivalent to <code>Layers</code> in the MVT specification.</p> <p>A <code>FeatureTable</code> contains thematically grouped vector data, known as <code>Features</code>. Features within a single FeatureTable share a common set of attribute columns (properties) and typically share the same geometry type (though this is not strictly required).</p> <p>Each <code>FeatureTable</code> is preceded by a <code>FeatureTableMetadata</code> that describes <code>FeatureTable</code>'s structure.</p> <p>The visual appearance of a tile is usually defined by a MapLibre Style, which specifies how features are rendered.</p> <p>Each feature must have - a <code>geometry</code> column (type based on the OGC's Simple Feature Access Model (SFA), excluding support for <code>GeometryCollection</code> types) - an optional <code>id</code> column - optional property columns</p> <p>While geometries are not restricted to a single type, using one type per table is recommended for efficiency. As in MVT, geometry coordinates are encoded as integers within vector tile grid coordinates.</p> <p>Note</p> <p>The terms <code>column</code>, <code>field</code>, and <code>property</code> are used interchangeably in this document.</p>"},{"location":"specification/#2-tile-layout","title":"2. Tile Layout","text":"<p>A <code>FeatureTable</code> in the MLT specification uses a tabular, column-oriented layout. It employs various lightweight compression schemes to encode column values efficiently.</p> <p>A FeatureTable consists of a mandatory <code>geometry</code> column, an optional <code>id</code> column, and optional property columns. The absence of a single header at the beginning of the tile allows <code>FeatureTable</code>s to be constructed independently, and even concatenated on the fly.</p> <p>A logical column is separated into several physical <code>streams</code> (sub-columns), inspired by the ORC file format. These streams are stored contiguously. A stream is a sequence of values of a known length in a continuous memory chunk, all sharing the same type. Streams include additional metadata, such as their size and encoding type.</p> <p>For example, a nullable string property column might have: - A <code>present</code> stream (a bit flag indicating the presence of a value). - A <code>length</code> stream (describing the number of characters for each string). - A <code>data</code> stream (containing the actual UTF-8 encoded string values).</p> <p>MLT defines the following stream types:</p> <ul> <li>Present:   Enables efficient encoding of sparse columns by indicating value presence via a bit flag.   This stream can be omitted if the column is not nullable (as declared in the <code>FieldMetadata</code>).</li> <li>Data:   Stores the actual column data (e.g., <code>boolean</code>, <code>int</code>, <code>float</code>, or <code>string</code> values for feature properties, dictionary-encoded values, or geometry coordinates).   For fixed-size data types (<code>boolean</code>, <code>int</code>, <code>float</code>), this is the only required stream besides the optional <code>present</code> stream.</li> <li>Length:   Specifies the number of elements for variable-sized data types like strings or lists.</li> <li>Offset:   Stores offsets into a data stream when using dictionary encoding (e.g., for strings or vertices).</li> </ul> <p>These physical streams are further categorized into logical streams that define how to interpret the data:</p> <p></p>"},{"location":"specification/#21-metadata","title":"2.1 Metadata","text":""},{"location":"specification/#211-tileset-metadata","title":"2.1.1 Tileset Metadata","text":"<p>Note</p> <p>Tileset metadata was initially implemented as a size reduction experiment. This feature is not currently supported.</p> <p>Global metadata for the entire tileset is stored separately in a JSON file.</p> <p>This tileset metadata provides information for the full tileset and is the equivalent of the TileJSON spec commonly used with MVT and other tile types. By defining this information once per tileset, we avoid redundant metadata in each tile, saving significant space, especially for small tiles.</p>"},{"location":"specification/#212-tile-metadata","title":"2.1.2 Tile Metadata","text":"<p>There is no global tile header.  Each <code>FeatureTable</code> has its own metadata.</p>"},{"location":"specification/#213-featuretable-metadata","title":"2.1.3 FeatureTable Metadata","text":"<p>Each <code>FeatureTable</code> is preceded by a <code>FeatureTableMetadata</code> section describing it.</p> <p>Caution</p> <p>This is not clear, and possibly incorrect. Why any number? Should the size of the upcoming metadata and table be part of that structure?</p> <p>A FeatureTable consists of any number of the following sequences: - The size of the upcoming <code>FeatureTableMetadata</code> (varint-encoded). - The size of the upcoming <code>FeatureTable</code> (varint-encoded). - One <code>FeatureTableMetadata</code> section. - One <code>FeatureTable</code> section.</p> <p>This structure allows a tile to be built by simply concatenating separate results. The <code>FeatureTableMetadata</code> is described in detail below.</p> <p>Within a <code>FeatureTable</code>, additional metadata describes the structure of each part:</p> <ul> <li>FieldMetadata:   Contains information about a field (column), including the number of streams it comprises and its vector type for efficient decoding into the in-memory format.   Every field section is preceded by a <code>FieldMetadata</code> section.</li> <li>StreamMetadata:   Contains information about a stream, such as the encoding scheme used and the number of values.   Every stream section is preceded by a <code>StreamMetadata</code> section.</li> </ul> <p>Since every <code>Field</code> has a <code>FieldMetadata</code> section, even for fields absent in a specific tile, no <code>id</code> is needed. A field's absence is indicated by a zero value for its number of streams. All integers in metadata sections are <code>Varint</code>-encoded (for u32) or bit-packed (for u8).</p> <pre><code>---\ntitle: FeatureTableSchema\nconfig:\n  class:\n    hideEmptyMembersBox: true\n---\nclassDiagram\n    note for LogicalScalarType \"[EXPERIMENTAL]\"\n    note for ComplexColumn \"[EXPERIMENTAL]\"\n    note for ComplexField \"[EXPERIMENTAL]\"\n    note for ComplexType \"[EXPERIMENTAL]\"\n    note for LogicalComplexType \"[EXPERIMENTAL]\"\n    note for Field \"[EXPERIMENTAL]\"\n    note for ScalarField \"[EXPERIMENTAL]\"\n\n    %% ---------------- Tile ----------------\n    class Tile {\n      +LayerGroup[] groups\n    }\n\n    %% ---------------- LayerGroup ----------------\n    class LayerGroup {\n      +VarInt metadataSize\n      +TileMetadata metadata\n      +u8[] tileData\n    }\n\n    %% ---------------- TileMetadata ----------------\n    class TileMetadata {\n      +FeatureTable[] featureTables\n    }\n\n    %% ---------------- FeatureTable ----------------\n    class FeatureTable {\n      +String name\n      +VarInt columnCount\n      +Column[] columns\n    }\n\n    %% ---------------- Column ----------------\n    class Column {\n      +ColumnOptions options %% VarInt\n      +String name\n      +ScalarColumn scalarType %% oneof i.e., scalarType XOR complexType\n      +ComplexColumn complexType\n    }\n\n    %% ---------------- ScalarColumn ----------------\n    class ScalarColumn {\n      +ScalarColumnOptions options %% VarInt\n      +ScalarType physicalType %% oneof i.e., physicalType XOR logicalType\n      +LogicalScalarType logicalType\n    }\n\n    %% ---------------- ComplexColumn [EXPERIMENTAL] ----------------\n    class ComplexColumn {\n      +ComplexType physicalType %% oneof i.e., physicalType XOR logicalType\n      +LogicalComplexType logicalType\n      +VarInt childCount %% Present only if CHILD_TYPES is set in columnOptions\n      +Field[] children\n    }\n\n    %% ---------------- Field ----------------\n    class Field {\n      +FieldOptions options %% VarInt\n      +String name\n      +ScalarField scalarField %% oneof i.e., scalarField XOR complexField\n      +ComplexField complexField\n    }\n\n    %% ---------------- ScalarField ----------------\n    class ScalarField {\n      +ScalarType physicalType %% oneof i.e., physicalType XOR logicalType\n      +LogicalScalarType logicalType\n    }\n\n    %% ---------------- ComplexField [EXPERIMENTAL] ----------------\n    class ComplexField {\n      +ComplexType physicalType %% oneof i.e., physicalType XOR logicalType\n      +LogicalComplexType logicalType\n      +VarInt childCount %% Present only if CHILD_TYPES is set in columnOptions\n      +Field[] children\n    }\n\n    %% ---------------- String ------------------\n    class String {\n      +VarInt length\n      +u8 bytes[length] %% encoding is always UTF-8\n    }\n\n    %% ---------------- Enumerations ----------------\n    class ScalarType {\n      &lt;&lt;enumeration&gt;&gt;\n      BOOLEAN = 0\n      INT_8 = 1\n      UINT_8 = 2\n      INT_32 = 3\n      UINT_32 = 4\n      INT_64 = 5\n      UINT_64 = 6\n      FLOAT = 7\n      DOUBLE = 8\n      STRING = 9\n      INT_128 = 10\n      UINT_128 = 11\n    }\n\n    class LogicalScalarType {\n      &lt;&lt;enumeration&gt;&gt;\n      TIMESTAMP = 0\n      DATE = 1\n      JSON = 2\n    }\n\n    class ComplexType {\n      &lt;&lt;enumeration&gt;&gt;\n      VEC_2 = 0\n      VEC_3 = 1\n      GEOMETRY = 2\n      GEOMETRY_Z = 3\n      LIST = 4\n      MAP = 5\n      STRUCT = 6\n    }\n\n    class LogicalComplexType {\n      &lt;&lt;enumeration&gt;&gt;\n      BINARY = 0\n      RANGE_MAP = 1\n    }\n\n    class FieldOptions {\n      &lt;&lt;enumeration&gt;&gt;\n      NULLABLE = 1, %% Property is nullable\n      COMPLEX_TYPE = 2, %% A complexType follows if set, else a scalarType [EXPERIMENTAL]\n      LOGICAL_TYPE = 4, %% A logical type follows if set, else a physical type [EXPERIMENTAL]\n      CHILD_TYPES = 8, %% 1: Child types are present [EXPERIMENTAL]\n    }\n\n    class ColumnOptions {\n      &lt;&lt;enumeration&gt;&gt;\n      VERTEX_SCOPE = 16, %% Property is vertex-scope if set, else feature-scope\n    }\n\n    %% ---------------- Associations ----------------\n    FieldOptions &lt;|-- ColumnOptions\n    Tile --&gt; LayerGroup : groups\n    LayerGroup --&gt; TileMetadata : metadata\n    TileMetadata --&gt; FeatureTable : featureTables\n    FeatureTable --&gt; Column : columns\n    Column --&gt; ScalarColumn : scalarType\n    Column --&gt; ComplexColumn : complexType\n    ComplexColumn --&gt; Field : children\n    ComplexField --&gt; Field : children\n    Field --&gt; ComplexField : complexField\n    Field --&gt; ScalarField : scalarField</code></pre>  Hold \"Alt\" / \"Option\" to enable pan &amp; zoom"},{"location":"specification/#22-type-system","title":"2.2 Type System","text":"<p>The MLT type system distinguishes between physical and logical types. Physical types define the data layout in storage, while logical types add semantic meaning. This separation simplifies encoder and decoder implementation and allows encoding schemes to be reused.</p>"},{"location":"specification/#221-physical-types","title":"2.2.1 Physical Types","text":"<p>Physical types define the data layout in storage. Both scalar and complex types can be categorized as fixed-size or variable-size binaries. Variable-size binaries require an additional length stream to specify the size of each element. Fixed-size binaries have a consistent bit (boolean) or byte width and thus require no length stream.</p> <p>Scalar Types</p> <p>Each scalar type uses a specific encoding scheme for its data stream.</p> Data Type Logical Types Description Layout Boolean Fixed-Size Int8, UInt8, Int32, UInt32, Int64, UInt64 Date (int32), Timestamp (int64) Fixed-Size Float, Double Fixed-Size String JSON UTF-8 encoded sequence of characters Variable-Size <p>Complex Types </p> <p>Complex types are composed of scalar types.</p> Data Type Logical Types Description Layout List Binary (List) Variable-Size Map Map Additional key stream -&gt; length, key, data streams Variable-Size Struct Vec2, Vec3 Geometry, GeometryZ Fixed-Size"},{"location":"specification/#222-logical-types","title":"2.2.2 Logical Types","text":"<p>Caution</p> <p>Original text had <code>encodings can be reused</code> text which is unclear. What is \"encodings\" in this context?</p> <p>Logical types add semantics on top of physical types, enabling code reuse and simplifying encoder/decoder implementation.</p> Logical Type Physical Type Description Date Int32 Number of days since Unix epoch Timestamp Int64 Number of milliseconds since Unix epoch RangeMap Map, T&gt; For storing linear referencing information Binary List JSON String Geometry vec2 GeometryZ vec3"},{"location":"specification/#223-nested-fields-encoding","title":"2.2.3 Nested Fields Encoding","text":"<p>For nested properties (e.g., structs, lists), a present/length pair encoding is chosen over the Dremel encoding for its simpler implementation and faster decoding into the in-memory format.</p> <p>Every nullable field has an additional <code>present</code> stream. Every collection type field (e.g., a list) has an additional <code>length</code> stream specifying its length. As in ORC, nested fields are flattened based on a pre-order traversal.</p> <p>Nested fields can also use shared dictionary encoding to share a common dictionary (e.g., for localized <code>name:*</code> columns in an OSM dataset). Fields using a shared dictionary must be grouped sequentially in the file and prefixed by the dictionary.</p>"},{"location":"specification/#224-rangemap","title":"2.2.4 RangeMap","text":"<p><code>RangeMaps</code> efficiently encode linear referencing information, as used in Overture Maps. <code>RangeSets</code> store range values and data values in two separate streams. The min and max values for the ranges are stored as interleaved double values in a separate range stream.</p>"},{"location":"specification/#23-encoding-schemes","title":"2.3 Encoding Schemes","text":"<p>MLT uses various lightweight compression schemes for space-efficient storage and fast decoding. Encodings can be recursively cascaded (hybrid encodings) to a certain degree. For example, integer columns resulting from dictionary encoding can be further compressed using integer encoding schemes.</p> <p>The following encoding pool was selected based on analysis of compression ratio and decoding speed on test datasets like OpenMapTiles and Bing Maps tilesets.</p> Data Type Logical Level Technique Physical Level Technique Description Boolean Boolean RLE Integer Plain, RLE, Delta, Delta-RLE SIMD-FastPFOR, Varint Float Plain, RLE, Dictionary, ALP String Plain, Dictionary, FSST Dictionary Geometry Plain, Dictionary, Morton-Dictionary <p>Note</p> <p><code>ALP</code>, <code>FSST</code>, and <code>FastPFOR</code> encodings are .</p> <p>SIMD-FastPFOR is generally preferred over Varint encoding due to its smaller output and faster decoding speed. Varint encoding is included mainly for compatibility and simplicity, and it can be more efficient when combined with heavyweight compression like GZip.</p> <p>A brute-force search for the best encoding scheme is too costly. Instead, we recommend the selection strategy from the BTRBlocks paper:</p> <ul> <li>Calculate data metrics to exclude unsuitable encodings early (e.g., exclude RLE if the average run length is less than 2).</li> <li>Use a sampling-based algorithm: randomly select parts of the data totaling ~1% of the full dataset and apply the candidate encodings from step 1.   Choose the scheme that produces the smallest output.</li> </ul>"},{"location":"specification/#24-featuretable-layout","title":"2.4 FeatureTable Layout","text":""},{"location":"specification/#241-id-column","title":"2.4.1 ID Column","text":"<p>An <code>id</code> column is not mandatory. If included, it should be a u64 or narrower integer type (u32 if possible) for MVT compatibility. A narrower type enables the use of efficient encodings like FastPfor128.</p>"},{"location":"specification/#242-geometry-column","title":"2.4.2 Geometry Column","text":"<p>The geometry column uses a Structure of Arrays (SoA) layout (data-oriented design). The <code>x</code>, <code>y</code>, and optional <code>z</code> coordinates are stored interleaved in a <code>VertexBuffer</code> for efficient CPU processing and direct copying to GPU buffers. If the <code>z</code> coordinate is not needed for rendering, it can be stored separately as an <code>M-value</code> (see vertex-scoped properties).</p> <p>The geometry information is separated into different streams, partly inspired by the geoarrow specification. This separation enables better compression optimization and faster processing. Pre-tessellated polygon meshes can also be stored directly to avoid runtime triangulation.</p> <p>A geometry column can consist of the following streams:</p> Stream Name Data Type Encoding Mandatory GeometryType Byte Integer \u2713 NumGeometries UInt32 Integer NumParts UInt32 Integer NumRings UInt32 Integer NumTriangles UInt32 Integer IndexBuffer UInt32 Integer VertexOffsets UInt32 Integer VertexBuffer Int32 or Vertex[] Plain, Dictionary, Morton \u2713 <p>Depending on the geometry type, the following streams are used in addition to <code>GeometryType</code>: - Point: VertexBuffer - LineString: NumParts, VertexBuffer - Polygon: NumParts (Polygon), NumRings (LinearRing), VertexBuffer - MultiPoint: NumGeometries, VertexBuffer - MultiLineString: NumGeometries, NumParts (LineString), VertexBuffer - MultiPolygon: NumGeometries, NumParts (Polygon), NumRings (LinearRing), VertexBuffer</p> <p>An additional <code>VertexOffsets</code> stream is present when using Dictionary or Morton-Dictionary encoding. If geometries (mainly polygons) are pre-tessellated for direct GPU use, <code>NumTriangles</code> and <code>IndexBuffer</code> streams must be provided.</p>"},{"location":"specification/#243-property-columns","title":"2.4.3 Property Columns","text":"<p>Feature properties are divided into <code>feature-scoped</code> and <code>vertex-scoped</code> properties. - Feature-scoped: One value per feature. - Vertex-scoped: One value per vertex in the VertexBuffer per feature (modeling M-coordinates from GIS).</p> <p>Note</p> <p>TODO: Would it make sense to place vertex-scoped properties AFTER feature scoped ones? I suspect some implementations may act of feature-scoped properties first, and possibly even ignore vertex-scoped, at least for now (esp since vertex-scoped ones are still experimental)</p> <p>Vertex-scoped properties must be grouped together and placed before feature-scoped properties in the FeatureTable. A property's scope is defined in the tileset metadata using the <code>ColumnScope</code> enum.</p> <p>A property column can use any data type from the type system.</p>"},{"location":"specification/#3-example-layouts","title":"3. Example Layouts","text":"<p>The following examples illustrate the layout of a <code>FeatureTable</code> in storage. The color scheme is: - Blue boxes:   Logical constructs, not persisted.   Fields are reconstructed from streams based on TileSet metadata. - White boxes:   Metadata describing data structure (FeatureTable, Stream (SM), Feature (FM) metadata). - Yellow boxes:   Streams containing the actual data.</p>"},{"location":"specification/#31-place-layer","title":"3.1 Place Layer","text":"<p>Given a place layer with the following JSON schema structure: </p> <p>The resulting MLT tile layout for this layer, using a dictionary for the <code>geometry</code> and <code>name</code> columns, might look like this: </p>"},{"location":"specification/#32-linestring-geometry-with-flat-properties","title":"3.2 LineString Geometry with Flat Properties","text":"<p>Encoding of a <code>FeatureTable</code> with an <code>id</code> field, a <code>LineString</code> geometry field, and the flat feature-scoped properties <code>class</code> and <code>subclass</code>: </p>"},{"location":"specification/#33-multipolygon-with-flat-properties","title":"3.3 MultiPolygon with Flat Properties","text":"<p>Encoding of a <code>FeatureTable</code> with an <code>id</code> field, a <code>MultiPolygon</code> geometry field, and flat feature-scoped property fields. A <code>VertexOffsets</code> stream is present due to vertex dictionary encoding: </p>"},{"location":"specification/#34-vertex-scoped-and-feature-scoped-properties","title":"3.4 Vertex-Scoped and Feature-Scoped Properties","text":"<p>Example layout encoding vertex-scoped and feature-scoped properties. All vertex-scoped properties are grouped together and placed before feature-scoped properties. The <code>id</code> column is not nullable, so its present stream is omitted. </p>"},{"location":"specification/#4-sorting","title":"4. Sorting","text":"<p>Choosing the right column to sort features by can significantly reduce the size of the <code>FeatureTable</code>. Sorting is crucial for leveraging the columnar layout fully. Exhaustively testing every possible sorting order for every column in every layer is computationally expensive. See recommended heuristic in the encoding schemes.</p>"},{"location":"specification/#5-encodings","title":"5. Encodings","text":"<p>Note</p> <p>TODO: inline encodings here</p> <p>Encoding details are specified in a separate document.</p>"},{"location":"specification/#6-in-memory-format","title":"6. In-Memory Format","text":"<p>Note</p> <p>The following is a high-level overview; the in-memory format will be explained in more detail later.</p> <p>The record-oriented, array-of-structures in-memory model used by libraries processing Mapbox Vector Tiles incurs considerable overhead. This includes creating many small objects (increasing memory allocation load) and placing additional strain on garbage collectors in browsers.</p> <p>MLT uses a columnar memory layout (data-oriented design) for its in-memory format to overcome these issues. This approach improves cache utilization for subsequent data access and enables the use of fast SIMD instructions. The MLT in-memory format incorporates ideas from analytical in-memory formats like Apache Arrow, Velox, and the DuckDB execution format, tailored for visualization use cases. It is also designed for future parallel processing on the GPU within compute shaders.</p> <p>The main design goals for the MLT in-memory format are: - Define a platform-agnostic representation to avoid expensive materialization costs, especially for strings. - Maximize CPU throughput by optimizing memory layout for cache locality and SIMD instructions. - Allow random (preferably constant-time) access to all data for parallel processing on GPUs (compute shaders). - Provide compressed data structures that can be processed directly without full decoding. - Provide tile geometries in a representation that can be loaded into GPU buffers with minimal additional processing.</p> <p>Data is stored in contiguous memory buffers called vectors, accompanied by metadata and an optional null bitmap. The storage format includes a <code>VectorType</code> field in the metadata to instruct the decoder which vector type to use for a specific field. An auxiliary offset buffer enables random access to variable-sized data types like strings or lists.</p> <p>The MLT in-memory format supports the following vector types:</p> <ul> <li>Flat Vectors</li> <li>Constant Vectors</li> <li>Sequence Vectors</li> <li>Dictionary Vectors</li> <li>FSST Dictionary Vectors </li> <li>Shared Dictionary Vectors </li> <li>Run-End Encoded (REE) Vectors</li> </ul> <p>Note</p> <p>Further evaluation is needed to determine if recent research can enable random access on delta-encoded values.</p> <p>Using a compressed vector where possible makes the conversion from storage to in-memory format essentially a zero-copy operation.</p> <p>Following Apache Arrow's approach and the Intel performance guide, decoders should allocate memory on addresses aligned to a 64-byte multiple (where possible).</p>"}]}